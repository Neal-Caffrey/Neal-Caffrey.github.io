'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _APILoader = require('../_utils/APILoader');

var _APILoader2 = _interopRequireDefault(_APILoader);

var _isFun = require('../_utils/isFun');

var _isFun2 = _interopRequireDefault(_isFun);

var _log = require('../_utils/log');

var _log2 = _interopRequireDefault(_log);

var _toCapitalString = require('../_utils/toCapitalString');

var _toCapitalString2 = _interopRequireDefault(_toCapitalString);

var _utils = require('../_utils/utils');

var _marker = require('../marker');

var _marker2 = _interopRequireDefault(_marker);

var _markers = require('../markers');

var _markers2 = _interopRequireDefault(_markers);

var _polygon = require('../polygon');

var _polygon2 = _interopRequireDefault(_polygon);

var _polyline = require('../polyline');

var _polyline2 = _interopRequireDefault(_polyline);

var _infowindow = require('../infowindow');

var _infowindow2 = _interopRequireDefault(_infowindow);

var _circle = require('../circle');

var _circle2 = _interopRequireDefault(_circle);

var _groundimage = require('../groundimage');

var _groundimage2 = _interopRequireDefault(_groundimage);

var _mousetool = require('../mousetool');

var _mousetool2 = _interopRequireDefault(_mousetool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import CircleEditor from '../circleeditor';
// import PolyEditor from '../polyeditor';

var Component = _react2.default.Component;
var Children = _react2.default.Children;
var ComponentList = [_circle2.default, _groundimage2.default, _infowindow2.default, _markers2.default, _marker2.default, _polyline2.default, _polygon2.default, _mousetool2.default];

var configurableProps = ['layers', 'zoom', 'center', 'labelzIndex', 'lang', 'rotateEnable', 'mapStyle', 'features', 'cursor', 'defaultLayer'];

var allProps = configurableProps.concat(['view', 'zooms', 'crs', 'animateEnable', 'isHotspot', 'resizeEnable', 'showIndoorMap', 'indoorMap', 'expandZoomRange', 'dragEnable', 'zoomEnable', 'doubleClickZoom', 'keyboardEnable', 'jogEnable', 'scrollWheel', 'touchZoom', 'showBuildingBlock']);

var defaultOpts = {
  MapType: {
    showRoad: false,
    showTraffic: false,
    defaultType: 0
  },
  ToolBar: {
    position: 'RB',
    noIpLocate: true,
    locate: true,
    liteStyle: true,
    autoPosition: false
  },
  OverView: {}
};

var Map = function (_Component) {
  _inherits(Map, _Component);

  function Map(props) {
    _classCallCheck(this, Map);

    var _this = _possibleConstructorReturn(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, props));

    _this.state = {
      mapLoaded: false
    };
    if (typeof window !== 'undefined') {
      _this.pluginMap = {};
      _this.prevCenter = undefined;
      _this.prevZoom = undefined;
      _this.loader = new _APILoader2.default(props.amapkey).load();
    }
    return _this;
  }

  _createClass(Map, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var prevProps = this.props;
      this.loader.then(function () {
        if (_this2.map) {
          // this.setZoomAndCenter(nextProps);
          // this.setPlugins(nextProps);
          _this2.refreshMapLayout(prevProps, nextProps);
        }
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.loadMap();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.loadMap();
    }
  }, {
    key: 'loadMap',
    value: function loadMap() {
      var _this3 = this;

      this.loader.then(function () {
        _this3.initMapInstance();
        if (!_this3.state.mapLoaded) {
          _this3.setState({
            mapLoaded: true
          });
        }
      });
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _this4 = this;

      return Children.map(this.props.children, function (child) {
        if (child) {
          if (ComponentList.indexOf(child.type) === -1) {
            return child;
          }
          return _react2.default.cloneElement(child, {
            __map__: _this4.map,
            __ele__: _this4.mapWrapper
          });
        }
        return child;
      });
    }
  }, {
    key: 'initMapInstance',
    value: function initMapInstance() {
      if (!this.map) {
        // let opts = {};
        // if ('createOptions' in this.props) {
        //   opts = this.props.createOptions;
        // } else {
        //   if ('zoom' in this.props) {
        //     opts.zoom = this.props.zoom;
        //     this.prevZoom = opts.zoom;
        //   }
        //   if ('center' in this.props) {
        //     opts.center = new window.AMap.LngLat(
        //       this.props.center.longitude,
        //       this.props.center.latitude
        //     );
        //     this.prevCenter = opts.center;
        //   }
        // }
        var options = this.buildCreateOptions();
        this.map = new window.AMap.Map(this.mapWrapper, options);
        var _events = this.exposeMapInstance();
        _events && this.bindAMapEvents(_events);
        this.setPlugins(this.props);

        if ('rotateEnable' in this.props) {
          if (typeof this.props.rotateEnable === 'number') {
            this.map.setRotation(this.props.rotateEnable);
          }
        }
      }
    }
  }, {
    key: 'buildCreateOptions',
    value: function buildCreateOptions() {
      var _this5 = this;

      var props = this.props;
      var options = {};
      allProps.forEach(function (key) {
        if (key in props) {
          if (key === 'rotateEnable') {
            if (typeof props.rotateEnable === 'number') {
              options[key] = true;
            } else {
              options[key] = props.rotateEnable;
            }
          } else {
            options[key] = _this5.getSetterParam(key, props);
          }
        }
      });
      return options;
    }
  }, {
    key: 'bindAMapEvents',
    value: function bindAMapEvents(events) {
      var _this6 = this;

      var list = Object.keys(events);
      list.length && list.forEach(function (evName) {
        _this6.map.on(evName, events[evName]);
      });
    }
  }, {
    key: 'refreshMapLayout',
    value: function refreshMapLayout(prevProps, nextProps) {
      var _this7 = this;

      configurableProps.forEach(function (key) {
        if (key in nextProps) {
          if (_this7.detectPropChanged(key, prevProps, nextProps)) {
            var setterName = _this7.getSetterName(key);
            var setterParam = _this7.getSetterParam(key, nextProps);
            _this7.map[setterName](setterParam);
          }
        }
      });
    }
  }, {
    key: 'getSetterParam',
    value: function getSetterParam(key, props) {
      if (key === 'center') {
        return (0, _utils.getAMapPosition)(props.center);
      }
      return props[key];
    }
  }, {
    key: 'getSetterName',
    value: function getSetterName(key) {
      if (key === 'labelzIndex') {
        return 'setlabelzIndex';
      } else if (key === 'cursor') {
        return 'setDefaultCursor';
      } else if (key === 'rotateEnable') {
        return 'setRotation';
      }
      return 'set' + (0, _toCapitalString2.default)(key);
    }
  }, {
    key: 'detectPropChanged',
    value: function detectPropChanged(key, prevProps, nextProps) {
      return prevProps[key] !== nextProps[key];
    }
  }, {
    key: 'setZoomAndCenter',
    value: function setZoomAndCenter(props) {
      if (this.prevCenter === props.center && this.prevZoom === props.zoom) {
        // do nothing
      } else {
        this.prevCenter = props.center;
        this.prevZoom = props.zoom;
        var zoomChange = false;
        var centerChange = false;
        var newCenter = void 0;
        if ('zoom' in props) {
          if (props.zoom !== this.map.getZoom()) {
            zoomChange = true;
          }
        }

        if ('center' in props && props.center) {
          newCenter = new window.AMap.LngLat(props.center.longitude, props.center.latitude);
          if (props.center !== this.props.center) {
            centerChange = true;
          }
        }
        if (zoomChange) {
          if (centerChange) {
            this.map.setZoomAndCenter(props.zoom, newCenter);
          } else {
            this.map.setZoom(props.zoom);
          }
        } else {
          if (centerChange) {
            this.map.setCenter(newCenter);
          }
        }
      }
    }
  }, {
    key: 'setPlugins',
    value: function setPlugins(props) {
      var _this8 = this;

      var pluginList = ['Scale', 'ToolBar', 'MapType', 'OverView'];
      if ('plugins' in props) {
        var _plugins = props.plugins;
        if (_plugins && _plugins.length) {
          _plugins.forEach(function (p) {
            var name = void 0,
                config = void 0,
                visible = void 0;
            if (typeof p === 'string') {
              name = p;
              config = null;
              visible = true;
            } else {
              name = p.name;
              config = p.options;
              visible = 'visible' in config && typeof config.visible === 'boolean' ? config.visible : true;
              delete config.visible;
            }
            var idx = pluginList.indexOf(name);
            if (idx === -1) {
              _log2.default.warning('INVALID_MAP_PLUGIN');
            } else {
              if (visible) {
                pluginList.splice(idx, 1);
                _this8.installPlugin(name, config);
              }
            }
          });
        }
      }
      this.removeOrDisablePlugins(pluginList);
    }
  }, {
    key: 'removeOrDisablePlugins',
    value: function removeOrDisablePlugins(plugins) {
      var _this9 = this;

      if (plugins && plugins.length) {
        plugins.forEach(function (p) {
          if (p in _this9.pluginMap) {
            _this9.pluginMap[p].hide();
          }
        });
      }
    }
  }, {
    key: 'installPlugin',
    value: function installPlugin(name, opts) {
      opts = opts || {};
      switch (name) {
        case 'Scale':
          this.setScalePlugin(opts);
          break;
        case 'ToolBar':
          this.setToolbarPlugin(opts);
          break;
        case 'OverView':
          this.setOverviewPlugin(opts);
          break;
        case 'MapType':
          this.setMapTypePlugin(opts);
          break;
        default:
        // do nothing
      }
    }
  }, {
    key: 'setMapTypePlugin',
    value: function setMapTypePlugin(opts) {
      var _this10 = this;

      if (this.pluginMap['MapType']) {
        this.pluginMap.MapType.show();
      } else {
        var onCreated = opts.onCreated,
            restOpts = _objectWithoutProperties(opts, ['onCreated']);

        var initOpts = _extends({}, defaultOpts.MapType, restOpts);
        this.map.plugin(['AMap.MapType'], function () {
          _this10.pluginMap.MapType = new window.AMap.MapType(initOpts);
          _this10.map.addControl(_this10.pluginMap.MapType);
          if ((0, _isFun2.default)(onCreated)) {
            onCreated(_this10.pluginMap.MapType);
          }
        });
      }
    }
  }, {
    key: 'setOverviewPlugin',
    value: function setOverviewPlugin(opts) {
      var _this11 = this;

      if (this.pluginMap['OverView']) {
        this.pluginMap.OverView.show();
      } else {
        var onCreated = opts.onCreated,
            restOpts = _objectWithoutProperties(opts, ['onCreated']);

        var initOpts = _extends({}, defaultOpts.OverView, restOpts);
        this.map.plugin(['AMap.OverView'], function () {
          _this11.pluginMap.OverView = new window.AMap.OverView(initOpts);
          _this11.map.addControl(_this11.pluginMap.OverView);
          if ((0, _isFun2.default)(onCreated)) {
            onCreated(_this11.pluginMap.OverView);
          }
        });
      }
    }
  }, {
    key: 'setScalePlugin',
    value: function setScalePlugin(opts) {
      var _this12 = this;

      if (this.pluginMap['Scale']) {
        this.pluginMap.Scale.show();
      } else {
        this.map.plugin(['AMap.Scale'], function () {
          _this12.pluginMap.Scale = new window.AMap.Scale();
          _this12.map.addControl(_this12.pluginMap.Scale);
          if ((0, _isFun2.default)(opts.onCreated)) {
            opts.onCreated(_this12.pluginMap.Scale);
          }
        });
      }
    }
  }, {
    key: 'setToolbarPlugin',
    value: function setToolbarPlugin(opts) {
      var _this13 = this;

      if (this.pluginMap['ToolBar']) {
        this.pluginMap.ToolBar.show();
      } else {
        var onCreated = opts.onCreated,
            restOpts = _objectWithoutProperties(opts, ['onCreated']);

        var initOpts = _extends({}, defaultOpts.ToolBar, restOpts);
        this.map.plugin(['AMap.ToolBar'], function () {
          _this13.pluginMap.ToolBar = new window.AMap.ToolBar(initOpts);
          _this13.map.addControl(_this13.pluginMap.ToolBar);
          if ((0, _isFun2.default)(onCreated)) {
            onCreated(_this13.pluginMap.ToolBar);
          }
        });
      }
    }

    // 用户可以通过 onCreated 事件获取 map 实例

  }, {
    key: 'exposeMapInstance',
    value: function exposeMapInstance() {
      if ('events' in this.props) {
        var _events2 = this.props.events || {};
        if ((0, _isFun2.default)(_events2.created)) {
          _events2.created(this.map);
          delete _events2.created;
        }
        return _events2;
      }
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this14 = this;

      return _react2.default.createElement(
        'div',
        { style: { width: '100%', height: '100%', position: 'relative' } },
        _react2.default.createElement(
          'div',
          { ref: function ref(div) {
              _this14.mapWrapper = div;
            }, style: { width: '100%', height: '100%' } },
          _react2.default.createElement('div', { style: { background: '#eee', width: '100%', height: '100%' } })
        ),
        _react2.default.createElement(
          'div',
          null,
          this.state.mapLoaded ? this.renderChildren() : null
        )
      );
    }
  }]);

  return Map;
}(Component);

exports.default = Map;