/*
* ReactMap - $1.2.3
* 功能：***
* 说明：***
* 参数： {
**
* }
*/
import './scss/index.scss';
import React , {Component,Children} from 'react';
import {Map,Polygon,Markers,InfoWindow,Marker} from 'react-amap';
const fullImgUrl = require('./img/fullscreen.png');
const idSpace = 'WG-Map'+(+new Date);
export default class ReactMap extends Component{

  constructor(props){
    super(props);
    this.state = {
      zoom : this.props.zoom,
      isFull : false,
      markerIndex : this.props.markerSelIndex,
      markers : this.props.markers || [],
      center : this.getCenter(this.props)

    }
    this.mapEvents = {
      created: (map) => {
        this.mapInstance = map;
        this.addGoogleLayer(this.mapInstance );
      }
    };
    this.polygonStock = {
      strokeColor: "#93d749", //线颜色
      strokeOpacity: 1, //线透明度
      strokeWeight: 3,    //线宽
      fillColor: "#93d749", //填充色
      fillOpacity: 0.35//填充透明度
    }


    this.markerEvents = {
      click:(e, marker) => {
        let extData = marker.getExtData( );
        extData && this.setState({
          markerIndex : extData.markerIndex,
          center : marker.getPosition()
        });
        console.log(marker.getPosition())
      },
      mouseout:(e, marker) => {
        // this.setState({
        //   markerIndex : -1
        // })
      },
      created : (instance)=>{
        setTimeout(()=>{
          this.mapInstance.setFitView();
        },300)

      }
    }
  }

  getCenter(props){
    if(!props.markers || props.markers.length == 0 || props.markerSelIndex == -1){
      return null;
    }
    let obj =  props.markers[props.markerSelIndex];
    return {
      latitude:obj.hotelLatitude,
      longitude :obj.hotelLongitude
    }
  }

  removeAllMarkers(){
    this.mapInstance && this.mapInstance.clearMap()
  }

  renderMarkerDefault(){
    return <div><img src='//webapi.amap.com/theme/v1.3/markers/n/mark_bs.png'/></div>
  }
  renderMarkerActive(){
    return <div style={{zIndex : 500}}><img style={{height:'33px',marginLeft:'-7px'}} src='//icons.iconarchive.com/icons/paomedia/small-n-flat/1024/map-marker-icon.png'/></div>
  }
  componentWillUpdate(){
    this.mapEvents = {
      created: (map) => {
        this.mapInstance = map;
        this.addGoogleLayer(this.mapInstance );
      }
    };
  }
  componentDidUpdate(){
    // this.mapInstance && this.mapInstance.setFitView();
  }
  componentWillReceiveProps(nextProps){

    if (nextProps.markerSelIndex === this.state.markerIndex && this.state.markers !== nextProps.markers) {
        this.removeAllMarkers();
      }
    this.mapInstance.setFitView();
    this.setState({
      markerIndex : nextProps.markerSelIndex,
      markers : nextProps.markers,
      center : this.getCenter(nextProps)
    })
  }
  addGoogleLayer(map){
    let  googleLayer = new AMap.TileLayer({
      // 图块取图地址
      tileUrl: 'http://mt{1,2,3,0}.google.cn/vt/lyrs=m@142&hl=zh-CN&gl=cn&x=[x]&y=[y]&z=[z]&s=Galil',
      zIndex:100,
      map : map
    });
    setTimeout(()=>{
      googleLayer.setMap(map);
      map.setFitView();
      console.log('setFitView')
    },300)
  }

  getPlugins(){
    return [
      {
        name : 'ToolBar',
        options : {
          locate : false
        }
      },
    ]
  }
  fullScreenToggle(){
    this.setState({
      isFull : !this.state.isFull
    })
  }
  renderInBtn(){
    return (
      <div className='WG-MapFullScreen'
        onClick={this.fullScreenToggle.bind(this)}
        style={{backgroundImage : `url(${fullImgUrl})`}}
        >
        {this.state.isFull ? '收起地图' : '展开地图'}
      </div>
    )
  }
  renderFullBtn(){
    return (
      <div className='WG-MapFullScreenBtn'

        onClick={this.fullScreenToggle.bind(this)}
        >
        {this.state.isFull ? '收起地图' : '展开地图'}
      </div>
    )
  }
  renderFullMode(){
    return (
      <div  id={idSpace} className='WG-MapFull'>
        <div className="WG-MapOverLay">
          <Map
            events={this.mapEvents}
            amapkey='e35ad1df5095e45e75ce8a2f97040dc5'
            {...this.state}
            plugins={this.getPlugins()}>
            {this.getMarkers()}
            {this.getInfos()}
          </Map>
          {this.renderFullBtn()}
        </div>
      </div>
    )
  }
  getMarkers(){
    return this.state.markers.map((val,index)=>{
      let marker =  {
        position : {
          longitude :val.hotelLongitude,
          latitude : val.hotelLatitude
        },
        events : this.markerEvents,
        render:this.renderMarkerLayout.bind(this,index),
        zIndex : index == this.state.markerIndex ? 500 : 100,
        extData : {
          markerIndex:index,
        }
      }
      const html = `
      <p class='WG-infoWrap'><a target='_blank' href="${this.props.preHref}${val.hotelId}">${val.hotelNameEn}(${val.hotelName})</a></p>
      `
      return (
        <Marker key={index} {...marker}>

        </Marker>
      );
    });
  }
  getInfos(){
    return this.state.markers.map((val,index)=>{
      let marker =  {
        position : {
          longitude :val.hotelLongitude,
          latitude : val.hotelLatitude
        }
      }
      const innerHref = this.props.preHref ? `<a target='_blank' href="${this.props.preHref}${val.hotelId}"> ${val.hotelNameEn}(${val.hotelName})</a>` :  ` ${val.hotelNameEn}(${val.hotelName})`;
      const html = `
      <p class='WG-infoWrap'>${innerHref}</p>
      `
      return (
        <InfoWindow
          key={index}
          className='WG-InfoWindow'
          position={marker.position}
          visible={this.state.markerIndex === index ?  true : false}
          content={html}
          offset={[0,-40]}
          autoMove={false}
          />
      );
    });
  }



  renderMarkerLayout(index){
    return   index === this.state.markerIndex ? this.renderMarkerActive() : this.renderMarkerDefault()
  }
  renderInMode(){
    return (
      <div style={this.props.wraperStyle} id={idSpace} className='WG-Map'>
        <Map
          events={this.mapEvents}
          amapkey='e35ad1df5095e45e75ce8a2f97040dc5'
          {...this.state}
          plugins={this.getPlugins()}>

          {this.getMarkers()}
          {this.getInfos()}
        </Map>
        {this.renderInBtn()}
      </div>
    )
  }
  render(){
    if(  this.state.isFull ){
      return this.renderFullMode();
    }else{
      return this.renderInMode();
    }
  }
}
