/*
 * webpack.config - 2.0.0
 *
 */

const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');
const path = require('path');
const common = require('./common.js');
const projectRoot = path.resolve(__dirname, './');
const autoprefixer = require('autoprefixer');
const precss = require('precss');
const ExtractTextPlugin = require("extract-text-webpack-plugin")

const hotMiddlewareScript = 'webpack-hot-middleware/client?reload=true';
const exitNodeModules = function(files) {
	if (!/\/local-/.test(files) && /\/node_modules\//.test(files)) return files;
	return '';
};

const argv = process.argv;
const getWatching = function() {
	let index = argv.indexOf('--watch');
	let prop = true;
	if (index > -1 && argv[index + 1] == 'false')
		prop = false;
	return prop;
};

let plugins = [
	// new ExtractTextPlugin("[name].css"),
	new webpack.LoaderOptionsPlugin({
		options: {
			postcss: function() {
				return [precss, autoprefixer({
					browsers: ['>0%']
				})];
			}
		}
	})
];
let entry = {
	'main': './src/index.js',
};
let sassLoader = ExtractTextPlugin.extract({
	fallback: 'style-loader',
	use: "css-loader!postcss-loader!sass-loader"
});

let expernals = {
	"local-Juicer": "local-Juicer",
	"local-Zepto": "local-Zepto"
};

if (getWatching()) {
	plugins.push(new webpack.HotModuleReplacementPlugin());
	plugins.push(new HtmlWebpackPlugin({
		title: '皇包车-插件系统-ComImg',
		filename: 'app/index.html',
		template: path.join(projectRoot, './test/views/index.html'),
		inject: true,
		common: common,
		chunks: ['index']
	}));
	plugins.push(new webpack.NoErrorsPlugin());
	Object.assign(entry, {
		'index': ['./test/static/index.js', hotMiddlewareScript],
	});
	// sassLoader = "style-loader!css-loader!sass-loader";
	expernals = {

	};
}

module.exports = {
	watch: getWatching(),
	entry: entry,
	output: {
		filename: '[name].js',
		path: path.join(projectRoot, './dist'),
		publicPath: '/',
		libraryTarget: 'umd',
	},
	devtool: 'source-map',
	resolve: {
		alias: {
			'src': path.join(projectRoot, '../src'),
			'assets': path.join(projectRoot, '../src/assets')
		}
	},
	externals: expernals,
	module: {
		loaders: [{
			test: /\.js$/,
			loader: 'babel-loader',
			include: projectRoot,
			exclude: exitNodeModules,
			query: {
				presets: ['es2015']
			}
		}, {
			test: /\.json$/,
			loader: 'json-loader'
		}, {
			test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
			loader: 'url-loader',
			query: {
				limit: 2000,
			}
		}, {
			test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
			loader: 'url-loader',
			query: {
				limit: 10000,
			}
		}, {
			test: /\.html$/,
			loader: "html-loader",
			include: path.join(projectRoot, './src'),
			exclude: exitNodeModules,
		}, {
			test: /\.tpl$/,
			loader: "string-loader"
		}]
	},
	plugins: plugins,

}
