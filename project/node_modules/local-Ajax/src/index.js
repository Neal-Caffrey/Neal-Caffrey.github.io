/*
 * Ajax - $1.1.1
 * 功能：ajax请求
 * 说明：添加promise支持
 * 参数： {
 ** promise : true, 默认支持promise
 * }
 */
"use strict";
const _gol = window || this;

const $ = require('local-Zepto');

const _extend = (obj, props) => {
	for (let key in props) obj[key] = props[key];
	return obj;
};

const _Promise = _gol.Promise;

const PackPromise = () => {
	if (_Promise) return new _Promise((resolve, reject) => {
		resolve(_Promise);
	});
	else return require.ensure([], function(require) {
		return require('bluebird');
	});
};

const _result = (result) => {
	if (typeof result == 'string') return JSON.parse(JSON.stringify(result));
	else return result;
}

const _uuid = () => 'WG_Ajax' + (new Date()).getTime();

class Ajax {
	constructor(option) {
		this.name = 'Ajax';
		this.version = '$1.1.1';
		this.catchs = [];
		this.option = {
			url: '',
			type: 'GET',
			dataType: 'json',
			promise: true,
			success: function() {},
			fail: function() {},
			abort: false,
		};
		this.data = {
			name: this.name,
			uuid: _uuid(),
		};
		this._option = option;
	}

	get _name() {
		return this.name;
	}

	get _version() {
		return this.version;
	}

	set _option(option) {
		_extend(this.option, option);
	}

	get _option() {
		return this.option;
	}

	set _data(data) {
		_extend(this.data, data);
	}

	get _data() {
		return this.data;
	}

	checkList() {

	}


	_action(option = {}) {

		if (option.promise) return this.promise()
			.then((res) => {
				return new res((resolve, reject) => {
					let params = {
						success: function(success) {
							resolve(success);
						},
						fail: function(fail) {
							reject(fail);
						},
						error: function(xhr, errorType, error) {
							reject(xhr,errorType,error);
						}
					};
					_extend(option, params);
					if (this.data.abort) this.catchs.push($.ajax(option));
					else $.ajax(option);
				});
			});
		else {
			if (this.option.abort) {
				let opSuccess = option.success;
				try {
					delete option.success;
				} catch (e) {
					option.success = null;
				}
				let opt = {
					success: (res) => {
						this.catchs.shift();
						opSuccess.call(this, res);
					}
				};
				_extend(option, opt);
				this.catchs.forEach((item) => {
					item.abort();
				});
				this.catchs.push($.ajax(option));
				return this.catchs[0];
			} else return $.ajax(option);
		}
	}

	promise() {
		return PackPromise()
			.then((res) => {
				return res;
			});
	}

	ajax(option = {}) {
		this._option = option;
		return this._action(this.option);
	}

}

if (typeof define === 'function' && define.amd) define(function() {
	return Ajax
});
else if (typeof exports === 'object') module.exports = Ajax;
else _gol.Ajax = Ajax;
