'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 此处 APILoader 的实现参考了 vue-amap 中相应的实现
// https://github.com/ElemeFE/vue-amap/blob/dev/src/lib/services/lazy-amap-api-loader.js
var DEFAULT_CONFIG = {
  v: 1.3,
  hostAndPath: 'webapi.amap.com/maps',
  key: 'f97efc35164149d0c0f299e7a8adb3d2',
  plugin: [],
  callback: '__amap_init_callback'
};

var __script_loaded = false;
var queuedLoader = [];

var APILoader = function () {
  function APILoader(key) {
    _classCallCheck(this, APILoader);

    this.config = DEFAULT_CONFIG;
    if (typeof window !== 'undefined') {
      if (key) {
        this.config.key = key;
      } else if ('amapkey' in window) {
        this.config.key = window.amapkey;
      } else {
        //
      }
    }
  }

  _createClass(APILoader, [{
    key: 'getScriptSrc',
    value: function getScriptSrc(cfg) {
      var protocol = window.location.protocol;
      var scriptSrc = protocol + '//' + cfg.hostAndPath + '?v=' + cfg.v + '&key=' + cfg.key + '&callback=' + cfg.callback;
      if (cfg.plugin.length) scriptSrc += '&plugin=' + cfg.plugin.join(',');
      return scriptSrc;
    }
  }, {
    key: 'load',
    value: function load() {
      if (typeof window === 'undefined') {
        return null;
      }
      var _config = this.config;
      /*
       * 初次加载同步加载插件；
       * 后面再加载的时候，要确保所依赖的插件也全部异步加载成功
       */
      if (window.AMap) {
        // 要确保所有的插件加载成功
        if (_config.plugin && _config.plugin.length) {
          var promiseArr = [];
          _config.plugin.forEach(function (p) {
            var pro = new Promise(function (resolve) {
              window.AMap.plugin(p, function () {
                resolve();
              });
            });
            promiseArr.push(pro);
          });
          return Promise.all(promiseArr);
        }
        return Promise.resolve();
      }

      if (__script_loaded) {
        return new Promise(function (resolve) {
          queuedLoader.push(function () {
            resolve();
          });
        });
      }
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.async = true;
      script.defer = true;
      script.src = this.getScriptSrc(_config);

      var scriptLoadingPromise = new Promise(function (resolve, reject) {
        window[_config.callback] = function () {
          queuedLoader.forEach(function (event) {
            return event();
          });
          resolve();
        };
        script.onerror = function (error) {
          return reject(error);
        };
      });
      document.head.appendChild(script);
      __script_loaded = true;
      return scriptLoadingPromise;
    }
  }]);

  return APILoader;
}();

exports.default = APILoader;