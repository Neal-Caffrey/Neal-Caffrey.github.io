/*
 * Utils - 1.0.0
 * 功能：公共方法
 * 说明：***
 * 参数： {
 **
 * }
 */
"use strict";
const _gol = window || this;

var Utils = {
    _getRequestParam: function(param, uri) {
        let value;
        uri = uri || window.location.href;
        value = uri.match(new RegExp('[\?\&]' + param + '=([^\&\#]*)([\&\#]?)', 'i'));
        return value ? decodeURIComponent(value[1]) : value;
    },
    _getQueryJson: function() {
        // let ret = {}; //定义数组
        // window.location.search.substr(1).replace(/(\w+)=(\w+)/ig, function (a, b, c) {
        //     ret[b] = unescape(c);
        // });
        // return ret;
        return Utils._getQueryObjJson();
    },
    _getQueryObjJson: function(u) {
        var obj = {};
        var keyvalue = [];
        var key = "",
            value = "";
        var url = u || window.location.href;
        var paraString = url.substring(url.indexOf("?") + 1, url.length).replace(/#.+/, '').split("&");
        for (var i in paraString) {
            keyvalue = paraString[i].split("=");
            key = keyvalue[0];
            value = keyvalue[1];
            obj[key] = decodeURIComponent(value);
        }
        return obj;
    },
    _symbol: function(n) {
        return (n + '').replace(/(?=(?!\b)(\d{3})+$)/g, ',');
    },
    _isWX: function() {
        let plateForm = this._plateForm();
        return plateForm.app == 'micromessenger';
    },
    _isIOS: function() {
        let plateForm = this._plateForm();
        return plateForm.os == 'iphone' || plateForm.os == 'cpu';
    },
    _isAndroid: function() {
        let plateForm = this._plateForm();
        return plateForm.os == 'android' || plateForm.os == 'linux';
    },
    _plateForm: function() {
        let that = this;
        let UA = navigator.userAgent.toLowerCase();
        let res = {};
        let [OS, APP, PC] = [
            [
                /(cpu|iphone)\sos\s([\d]+)/,
                /(linux|android)\s([\d]+)/
            ],

            [
                /(micromessenger)\/([\d.]+)?/,
                /(hbcc|hbcg)\/([\d.]+)/,
            ],
            [
                /(chrome)\/([\d.]+)/,
                /(safari)\/([\d.]+)/,
                /(firefox)\/([\d.]+)/,
                /(msie)\/([\d.]+)/,
            ]
        ];
        OS.forEach((v, i) => {
            let ma = UA.match(v);
            if (ma) that._extend(res, {
                os: ma[1],
                version: ma[2],
            });
        });
        if (res.os) APP.forEach((a, j) => {
            let tch = UA.match(a);
            if (tch) that._extend(res, {
                app: tch[1],
                edition: tch[2],
            });
        });
        else PC.forEach((v, i) => {
            let ma = UA.match(v);
            if (ma) that._extend(res, {
                os: ma[1],
                version: ma[2],
            });
        });
        return res;
    },
    _bindScrollTobottom: function(callback, tag) {
        function interval() {
            setTimeout(function() {
                check();
            }, 3);
        }

        function detach() {
            window.removeEventListener('scroll', interval, false);
            window.removeEventListener('resize', interval, false);
        }

        function check() {
            let winHeight = window.innerHeight,
                scrollTop = window.pageYOffset,
                i = 0,
                offset;

            offset = document.body.scrollHeight;

            if (scrollTop + winHeight + 50 >= offset) {
                detach();
                callback && tag && callback();
            }
        }

        window.addEventListener('scroll', interval, false);
        window.addEventListener('resize', interval, false);
    },
    _extend: function() {
        let y = 1,
            len = arguments.length,
            deepCopy = function(sub, base) {
                let i;
                for (i in base)
                    if (base.hasOwnProperty(i)) sub[i] = base[i];
            };
        if (arguments[0].extend) return arguments[0].extend(arguments.slice(1));
        for (; y < len; y++) deepCopy(arguments[0], arguments[y]);
        return arguments[0];

    },

    _contains: function(root, node) {
        root = root.length > 0 ? root[0] : root;
        node = node.length > 0 ? node[0] : node;
        if (root.contains) return root != node && root.contains(node);
        else if (root.compareDocumentPosition) return !!(root.compareDocumentPosition(node) & 16);
        else if (node)
            while (node = node.parentNode)
                if (node === root) return true;
        return false;
    },
    _setParam: function(obj) {
        let arr = [];
        for (let name in obj) {
            arr.push(name + '=' + JSON.stringify(obj[name]));
        }
        return arr.join('&');
    }
};

if (typeof define === 'function' && define.amd) define(function() {
    return Utils
});
else if (typeof exports === 'object') module.exports = Utils;
else _gol.Utils = Utils;