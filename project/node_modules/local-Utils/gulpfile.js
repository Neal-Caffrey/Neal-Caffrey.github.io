/*
* gulp - 0.0.2
*
*/
'use strict';
const gulp = require('gulp');
const gulpGit = require('gulp-git');
const gulpWebpack = require('gulp-webpack');
const webpack= require('webpack');
const fs = require('fs');
const config = require('./config.js');
const replace = require('gulp-replace');

const packageJSON = JSON.parse(fs.readFileSync('./package.json', 'utf8'));

let option = {};

const sign = {
	branch : 'daily/',
	commit : 'auto-commit',
	port   : 3000
};
const argv =  process.argv.slice(2);

const incVersion = function(version){
	let vs = version.split('.').join('');
	vs = +vs + 1;
	return (vs + '').split('').join('.');
};

switch(argv[0]){
	case 'add-push':
	case 'push':
	case 'branch':
	case 'pull':
		option.version = argv[1] ? sign.branch + argv[1] : sign.branch + packageJSON.version;
		break;
	case 'add-commit':
	case 'commit':
		option.commit = argv[1] ? argv[1] : sign.commit;
		break;
	case 'newbranch':
		option.version = argv[1] ? sign.branch + argv[1] : sign.branch + incVersion(packageJSON.version);
		break;
};

const pushFn = function(){
	return gulpGit.push('origin', option.version, function(err){
		if(err) throw err;
	});
};

const branchFn = function(){
	return gulpGit.checkout(option.version, function(err){
		if(err) gulp.task('newbranch');
	});
};

const newbranchFn = function(){
	return gulpGit.checkout(option.version, {args:'-b'}, function(err){
		if(err) gulp.task('branch');
		else{
			packageJSON.version = option.version.replace(sign.branch, '');
			fs.writeFileSync('./package.json', JSON.stringify(packageJSON, null, 4), 'utf-8');
		}
	});
};

const pullFn = function(){
	gulpGit.pull('origin', option.version, function(err){
		if(err) console.log('Error: Command failed: git pull');
	});
};

const removebranchFn = function(){
	return gulpGit.branch(option.version, {args:'-d'}, function (err) {
	  if (err) throw err;
	});
};

const demoFn = function(){
	return gulpWebpack(config, webpack)
	.pipe(gulp.dest('./dist'));
};

const serverFn = function(){
	return gulp.src(['./server.js'])
	.pipe(gulp.dest('./dist'));
};

const addFn = function(){
	return gulp.src('./')
	.pipe(gulpGit.add({args: '-A'}));
};

const commitFn = function(){
	return gulp.src('./')
	.pipe(gulpGit.commit(option.commit || 'commit', {emitData:true}));
};

const repaceVersionFn = function(){
	gulp.src(['./src/index.js'])
	.pipe(replace(/\$(\d\.\d\.\d)/g, function(a, b){
		return '$' + incVersion(b);
	}))
	.pipe(gulp.dest('./src'));
};

const tagFn = function(){
	return gulpGit.tag('publish/'+packageJSON.version,'auto tag',function(err){
		if(err)return;
		gulpGit.push('origin',`publish/${packageJSON.version}:publish/${packageJSON.version}`);
	});
}

gulp.task('repaceVersion', repaceVersionFn);

gulp.task('add', addFn);

gulp.task('commit', ['add'], commitFn);

gulp.task('pull',['commit'], pullFn);

gulp.task('push',['pull'], pushFn);

gulp.task('newbranch', newbranchFn);

gulp.task('branch', branchFn);


gulp.task('removebranch', removebranchFn);

gulp.task('demo', demoFn);

gulp.task('server', serverFn);

gulp.task('add-commit', ['commit']);

gulp.task('add-push', ['add-commit','push']);

gulp.task('tag', tagFn);